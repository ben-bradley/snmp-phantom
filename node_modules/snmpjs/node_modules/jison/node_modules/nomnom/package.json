{
  "name": "nomnom",
  "description": "Option parser with support for usage and commands",
  "version": "0.4.3",
  "author": {
    "name": "Heather Arthur",
    "email": "fayearthur@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/harthur/nomnom.git"
  },
  "main": "./nomnom",
  "keywords": [
    "arguments",
    "option parser",
    "command line",
    "options"
  ],
  "dependencies": {
    "underscore": ">= 1.1.5"
  },
  "readme": "# nomnom\nnomnom is an option parser for node and CommonJS. It noms your args and gives them back to you in a hash.\n\n\tvar options = require(\"nomnom\")\n\t    .opts({\n\t        version: {\n\t          \tstring: '--version',\n\t            help: 'print version and exit',\n\t            callback: function() {\n\t                return \"version 1.2.4\";\n\t            }\n\t        },\n\t        debug : {\n\t            string: '-d, --debug',\n\t            help: 'Print debugging info'\n\t        },\n\t        config: {\n\t            string: '-c PATH, --config=PATH',\n\t            default: 'config.json',\n\t            help: 'JSON file with tests to run'\n\t        }\n\t    })\n\t    .parseArgs();\n\n\tif(options.debug)\n\t    // do stuff\n\t\nYou don't have to specify anything if you don't want to:\n\n\tvar options = require(\"nomnom\").parseArgs();\n\n\tvar url = options[0];      // get the first positional arg\n\tvar debug = options.debug  // see if --debug was specified\n\tvar verbose = options.v    // see if -v was specified\n\n# Install\nfor [node.js](http://nodejs.org/) and [npm](http://github.com/isaacs/npm):\n\n\tnpm install nomnom\n\n# Commands\nNomnom supports command-based interfaces (e.g. with git: `git add -p` and `git rebase -i` where `add` and `rebase` are the commands):\n\n\tvar parser = require(\"nomnom\");\n\t\n\tparser.command('browser')\n\t    .callback(runBrowser)\n\t    .help(\"run browser tests\");\n\t\n\tparser.command('sanity')\n\t    .opts({\n\t        filename: {\n\t            position: 1,\n\t            help: 'test file to run'\n\t        },\n\t        config: {\n\t            string: '-c FILE, --config=FILE',\n\t            default: 'config.json',\n\t            help: 'json file with tests to run'\n\t        }\n\t    })\n\t    .callback(function(options) {\n\t         runSanity(options.filename);\n\t    })\n\t    .help(\"run the sanity tests\")\n\t\n\tparser.parseArgs();\n\t\nEach command generates its own usage message when `-h` or `--help` is specified with the command.\n\n# More Details\nNomnom supports args like `-d`, `--debug`, `--no-debug`, `--file=test.txt`, `-f test.txt`, `-xvf`, and positionals. Positionals are arguments that don't fit the `-a` or `--atomic` format and aren't attached to an option.\n\nValues are JSON parsed, so `--debug=true --count=3 --file=log.txt` would give you:\n\n\t{\n\t    \"debug\": true,\n\t    \"count\": 3,\n\t    \"file\": \"log.txt\"\n\t}\n\n# Usage\nNomnom prints out a usage message if `--help` or `-h` is an argument. Usage for these options in `test.js`:\n\n\tvar options = nomnom.opts({\n\t    action: {\n\t        position: 0,\n\t        help: \"either 'test', 'run', or 'xpi'\" \n\t    },\n\t    config: {\n\t        string: '-c FILE, --config=FILE',\n\t        help: 'json file with tests to run',\n\t    },\n\t    debug: {\n\t        string: '-d, --debug',\n\t        help: 'Print debugging info'\n\t    }\n\t}).parseArgs();\n\n...would look like this:\n\n\tUsage: node test.js <action> [options]\n\t\n\t<action>\t\teither 'test', 'run', or 'xpi'\n\t\n\toptions:\n\t-c FILE, --config=FILE\t\tjson file with tests to run\n\t-d, --debug\t\tPrint debugging info\n\n\n# Options hash\nThe options hash that is passed to `nomnom.opts()` is a hash keyed on option name. Each option specification can have the following fields:\n\n#### string\n\nspecifies what command line arguments to match on and wether the option takes an argument.\n\nTo attach an option to `--version` use `\"--version\"`\n\t\nTo attach to `-v` or `--version` use `\"-v, --version\"`\n\t\nTo attach to `-c` and `--config` and require an argument use `\"-c FILE, --config=FILE\"`\n\t\nThe metavar (e.g. `\"FILE\"`) is just a guide and can be any string. Note that `string` will be used when printing the usage for this option.\n\n#### help\n\nA string description of the option for the usage printout.\n\n#### default\n\nThe value to give the option if it's not specified in the arguments.\n\n#### callback\n\nA callback that will be executed as soon as the option is encountered. If the callback returns a string it will print the string and exit:\n\n\tvar opts = {\n\t    version: {\n\t        string: '--version',\n\t        callback: function() {\n\t            return \"version 1.2.4\";\n\t        }\n\t    },\n\t    date: {\n\t        string: '-y YYYY-MM-DD, --date=YYYY-MM-DD',\n\t        callback: function(date) {\n\t          if(!(/^\\d{4}\\-\\d\\d\\-\\d\\d$/).test(date))\n\t            return \"date must be in format yyyy-mm-dd\";\n\t        }\n\t    }\n\t}\n\n#### position\n\nThe position of the option if it's a positional argument. If the option should be matched to the first positional arg use position `0`\n\n#### required\n\nIf this is set to `true` and the option isn't in the args, a message will be printed and the program will exit.\n\n\n# Parser interface\n`require(\"nomnom\")` will give you the option parser. You can also make an instance of a parser with `require(\"nomnom\")()`. You can chain any of these functions off of a parser:\n\n#### opts\n\nThe options hash.\n\n#### usage\n\nThe string that will override the default generated usage message.\n\n#### help\n\nA string that is appended to the usage.\n\n#### scriptName\n\nNomnom can't detect the alias used to run your script. You can use `scriptName` to provide the correct name instead of e.g. `node test.js`.\n\n#### printFunc\n\nOverrides the usage printing function:\n\n\tnomnom.printFunc(function(usage) {\n\t    console.log(usage);\n\t});\n\n#### command\n\nTakes a command name and gives you a command object on which you can chain command options.\n\n#### callback\n\nA callback that will be called with the parsed options. If any commands are specified, this is only called if no command was used.\n\n#### globalOpts\n\nThe global options when commands are specified. Any options in here will be included in the usage string for any command.\n\n#### parseArgs\n\nParses node's `process.argv` and returns the parsed options hash. You can also provide argv:\n\n\tvar options = nomnom.parseArgs([\"-xvf\", \"--atomic=true\"])\n\n# Command interface\nA command is specified with `nomnom.command('name')`. All these functions can be chained on a command:\n\n#### opts\n\nThe options for this command.\n\n#### callback\n\nA callback that will be called with the parsed options when the command is used.\n\n#### help\n\nA help string describing the function of this command.\n\n\n\n",
  "_id": "nomnom@0.4.3",
  "dist": {
    "shasum": "e6fca566d805013612011784902d558ff9a47262"
  },
  "_from": "nomnom@0.4.3"
}
